<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.project.springtest" />
	
	
	<!-- Configurer that replaces ${...} placeholders with values from a properties 
		file (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- Uses Apache Commons DBCP for connection pooling. See Commons DBCP documentation 
		for the required JAR files. See the PetStore sample application also shipped 
		with Spring, for an example of Commons DBCP usage and the necessary build 
		script. Alternatively you can use another connection pool such as C3P0, similarly 
		configured using Spring. A standalone connection pool such as Commons DBCP 
		is a good choice for use outside an application server environment, including 
		web applications running in a web container without JTA, or integration testing 
		using the org.springframework.test package. -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}" />

	<!-- Transaction manager for a single JDBC DataSource (alternative to JTA) -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- ========================= COMPONENT DEFINITIONS ========================= -->

	<!-- Activates various annotations to be detected in bean classes: Spring's 
		@Required and @Autowired, as well as JSR 250's @PostConstruct, @PreDestroy 
		and @Resource (if available) and JPA's @PersistenceContext and @PersistenceUnit 
		(if available). -->
	<context:annotation-config />

	<!-- Forces a partial scan of the classpath to detect component classes 
		with various annotations to be detected as beans to managed by Spring. These 
		annotations include @Repository, @Service, @Controller and @Component. -->
	

	<!-- Instruct Spring to perform automatic transaction management on annotated 
		classes. The SpringJdbcIntro class uses @Transactional annotations. -->
	<!-- <tx:annotation-driven /> -->
	
</beans:beans>

